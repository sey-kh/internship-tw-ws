package order.domain;

import order.constant.Consts;
import order.entity.ComplexOrder;
import order.entity.Order;
import order.exceptions.ConditionError;
import order.exceptions.NotFoundException;
import order.model.request.CancelReqModel;
import order.model.request.OrderReqDetailsModel;
import order.model.request.UpdateReqModel;
import order.service.OrderRepository;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.*;

@Component
public class OrderDomain {

    private static OrderRepository orderRepository;

    @Autowired
    public OrderDomain(OrderRepository orderRepository) {
        OrderDomain.orderRepository = orderRepository;
    }

    private static Date getDateNow() {
        return new java.util.Date();
    }

    public static void activateOrder(List<ComplexOrder> allOrders){

        // prepare list of order objects
        List<Order> orders = new ArrayList<>();

        for (ComplexOrder o : allOrders){
            Order order = new Order();
            BeanUtils.copyProperties(o, order);
            orders.add(order);
        }
        // create orders entries
        orderRepository.saveAll(orders);
    }

    public static Order addOrder(OrderReqDetailsModel req) {
        // order entity
        Order order = new Order();

        // copy properties from request params
        BeanUtils.copyProperties(req, order);

        // update order properties where need be to generated by system
        String orderId = UUID.randomUUID().toString();
        order.setOrderId(orderId);
        order.setOrderDate(getDateNow());
        order.setModifiedDate(getDateNow());
        order.setStatus(Consts.CONFIRMED);

        // get all complex orders that can be activated by this order
        ComplexOrder complexOrder = new ComplexOrder();
        List<ComplexOrder> list = new ArrayList<>();
        List<ComplexOrder> _list = new ArrayList<>();

        BeanUtils.copyProperties(order, complexOrder);
        list.add(complexOrder);

        List<ComplexOrder> all_complex_orders = ComplexOrderDomain.get_to_be_activated_orders(list, _list);
        activateOrder(all_complex_orders);

        return order;
    }

    public static Order updateOrderQuantity(String orderId, UpdateReqModel req) {
        try {
            Order order = orderRepository.findById(orderId).get();
            if (order.getStatus().equals(Consts.CANCEL)){
                throw new ConditionError("Can not update cancelled order!");
            }
            order.setQuantity(req.getQuantity());
            order.setModifiedDate(getDateNow());
            orderRepository.save(order);
            return order;
        } catch (NoSuchElementException e) {
            throw new NotFoundException("id-" + orderId);
        }
    }

    public static Order cancelOrder(CancelReqModel req) {
        try {
            Order order = orderRepository.findById(req.getOrderId()).get();
            if (order.getStatus().equals(Consts.CANCEL)){
                throw new ConditionError("Order already cancelled!");
            }
            order.setStatus(Consts.CANCEL);
            order.setModifiedDate(getDateNow());
            orderRepository.save(order);
            return order;
        } catch (NoSuchElementException e) {
            throw new NotFoundException("id-" + req.getOrderId());
        }
    }

    public static Order getOrderById(String orderId) {
        try {
            return orderRepository.findById(orderId).get();
        } catch (NoSuchElementException e) {
            throw new NotFoundException("id-" + orderId);
        }
    }

    public static List<Order> getOrderByAccount(String account) {
        return orderRepository.findByAccount(account);
    }

    public static List<Order> findByAccountAndSymbol(String account, String symbol) {
        return orderRepository.findByAccountAndSymbol(account, symbol);
    }
}
