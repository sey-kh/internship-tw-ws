package order.domain;

import order.constant.Consts;
import order.entity.ComplexOrder;
import order.exceptions.ConditionError;
import order.exceptions.NotFoundException;
import order.model.request.CancelReqModel;
import order.model.request.ComplexOrderReqDetailsModel;
import order.service.ComplexOrderRepository;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

@Component
public class ComplexOrderDomain {

    private static ComplexOrderRepository complexOrderRepository;

    @Autowired
    public ComplexOrderDomain(ComplexOrderRepository complexOrderRepository) {
        ComplexOrderDomain.complexOrderRepository = complexOrderRepository;
    }

    private static Date getDateNow() {
        return new java.util.Date();
    }

    public static void activateByTime(Date time) {

        // find all complex orders where its activationDate reached
        List<ComplexOrder> list = complexOrderRepository.findAllWithCurrentDateBefore(time);

        if (list.size() != 0){
            // get all others complex orders where can be activated by these
            List<ComplexOrder> _list = new ArrayList<>();
            List<ComplexOrder> allOrders = get_to_be_activated_orders(list, _list);
            OrderDomain.activateOrder(allOrders);
            complexOrderRepository.deleteInBatch(allOrders);
        }
        else {
            Consts.LOGGER.info("There is no complex order to be activated");
        }
    }

    // return all complex orders that can be activated by other order
    public static List<ComplexOrder> get_to_be_activated_orders(List<ComplexOrder> list, List<ComplexOrder> allOrders) {
        if (list.size() != 0) {
            ComplexOrder o = list.get(0);
            String side = ((o.getBuy()) ? Consts.SALE : Consts.BUY);
            String symbol = o.getSymbol();
            Integer quantity = o.getQuantity();
            List<ComplexOrder> orders = complexOrderRepository.findAllByParams(symbol, side, quantity);

            allOrders.add(o);
            list.remove(o);

            if (orders.size() != 0) {
                list.addAll(orders);
                complexOrderRepository.deleteInBatch(orders);
            }
            return get_to_be_activated_orders(list, allOrders);
        } else {
            return allOrders;
        }
    }

    // add new entry
    public static ComplexOrder addOrder(ComplexOrderReqDetailsModel req) {
        // entity
        ComplexOrder order = new ComplexOrder();

        // copy properties from request params
        BeanUtils.copyProperties(req, order);

        // update order properties where need be to generated by system
        String orderId = UUID.randomUUID().toString();
        order.setOrderId(orderId);
        order.setOrderDate(getDateNow());
        order.setModifiedDate(getDateNow());
        order.setStatus(Consts.CONFIRMED);

        if (req.getActivationDate() != null) {
            try {
                Date activationDate = new SimpleDateFormat(Consts.TIME_STAMP_FORMAT).parse(req.getActivationDate());
                order.setActivationDate(activationDate);
            } catch (ParseException e) {
                e.printStackTrace();
                throw new ConditionError("activationDate must be formatted as " + Consts.TIME_STAMP_FORMAT);
            }
        }

        // create entry
        complexOrderRepository.save(order);

        return order;
    }

    // cancel entry
    public static ComplexOrder cancelOrder(CancelReqModel req) {

        try {
            ComplexOrder order = complexOrderRepository.findById(req.getOrderId()).get();
            if (order.getStatus().equals(Consts.CANCEL)) {
                throw new ConditionError("Order already cancelled!");
            }
            order.setStatus(Consts.CANCEL);
            complexOrderRepository.save(order);
            return order;
        } catch (NoSuchElementException e) {
            throw new NotFoundException("id-" + req.getOrderId());
        }
    }

}
