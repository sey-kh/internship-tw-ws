package order.service.impl;

import order.constant.Consts;
import order.exceptions.ConditionError;
import order.exceptions.NotFoundException;
import order.io.entity.ComplexOrder;
import order.io.repository.ComplexOrderRepository;
import order.model.request.CancelReqModel;
import order.model.request.ComplexOrderReqDetailsModel;
import order.service.ComplexOrderService;
import order.shared.Utils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ComplexOrderServiceImpl implements ComplexOrderService {


    private static ComplexOrderRepository complexOrderRepository;

    @Autowired
    public ComplexOrderServiceImpl(ComplexOrderRepository complexOrderRepository) {
        ComplexOrderServiceImpl.complexOrderRepository = complexOrderRepository;
    }

    @Override
    public ComplexOrder addOrder(ComplexOrderReqDetailsModel req) {

        // entity
        ComplexOrder order = new ComplexOrder();

        // copy properties from request params
        BeanUtils.copyProperties(req, order);

        // update order properties where need be to generated by system
        String orderId = Utils.generateRandomString();

        order.setOrderId(orderId);
        order.setOrderDate(Utils.getDateNow());
        order.setModifiedDate(Utils.getDateNow());
        order.setStatus(Consts.CONFIRMED);

//        if (req.getActivationDate() != null) {
//            try {
//                Date activationDate = new SimpleDateFormat(Consts.TIME_STAMP_FORMAT).parse(req.getActivationDate());
//                order.setActivationDate(activationDate);
//            } catch (ParseException e) {
//                e.printStackTrace();
//                throw new ConditionError("activationDate must be formatted as " + Consts.TIME_STAMP_FORMAT);
//            }
//        }

        complexOrderRepository.save(order);

        return order;
    }

    @Override
    public ComplexOrder cancelOrder(CancelReqModel req) {
        ComplexOrder order = complexOrderRepository.findById(req.getOrderId());
        if (order != null) {
            if (order.getStatus().equals(Consts.CONFIRMED)) {
                order.setStatus(Consts.CANCELLED);
                order.setModifiedDate(Utils.getDateNow());
                return complexOrderRepository.save(order);
            } else throw new ConditionError("Can not update to cancelled order");
        }
        throw new NotFoundException("id-" + req.getOrderId());
    }

    // for testing task, display allOrders in debug console
    @Override
    public List<ComplexOrder> getAllOrders() {
        return complexOrderRepository.getAllOrders();
    }

}
